<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>A-MAX v2.0</title>
    <style>
        :root {
            --primary: #2563eb;
            --secondary: #4f46e5;
            --bg: #f8fafc;
            --text: #1e293b;
        }

        body {
            font-family: 'Segoe UI', system-ui, sans-serif;
            background: var(--bg);
            margin: 0;
            padding: 20px;
        }

        h1 {
            text-align: center;
            font-size: 2.8rem;
            margin: 1rem 0 2rem;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            letter-spacing: -1px;
        }

        .chat-container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 16px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        }

        .chat-box {
            height: 500px;
            padding: 24px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 12px;
            background: #f8fafc;
        }

        .user-message, .bot-message {
            margin: 8px 0;
            padding: 14px 20px;
            border-radius: 20px;
            max-width: 75%;
            font-size: 1.05rem;
            line-height: 1.4;
            animation: messagePop 0.3s ease;
        }

        .user-message {
            background: var(--primary);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .bot-message {
            background: white;
            color: var(--text);
            border: 1px solid #e2e8f0;
            margin-right: auto;
            border-bottom-left-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .input-area {
            display: flex;
            gap: 12px;
            padding: 20px;
            background: white;
            border-top: 1px solid #f1f5f9;
        }

        input {
            flex: 1;
            padding: 14px 24px;
            border: 1px solid #e2e8f0;
            border-radius: 30px;
            font-size: 1rem;
            transition: all 0.2s;
        }

        input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(37,99,235,0.1);
        }

        button {
            padding: 14px 28px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 30px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s;
        }

        button:hover {
            transform: translateY(-1px);
        }

        /* Thinking animation */
        .thinking {
            display: inline-flex;
            gap: 8px;
            padding: 16px 24px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .dot-flashing {
            width: 10px;
            height: 10px;
            background: #94a3b8;
            border-radius: 50%;
            animation: dotFlash 1.4s infinite linear;
        }

        .dot-flashing:nth-child(2) { animation-delay: 0.2s; }
        .dot-flashing:nth-child(3) { animation-delay: 0.4s; }

        @keyframes messagePop {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes dotFlash {
            0%, 80%, 100% { opacity: 0.3; }
            40% { opacity: 1; }
        }
    </style>
</head>
<body>
    <h1>A-MAX v2.0</h1>
    <div class="chat-container">
        <div class="chat-box" id="chat-box"></div>
        <div class="input-area">
            <input type="text" id="user-input" placeholder="Type your message here..." />
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>

    <script>
        const responses = {
            greetings: ["hi", "hello", "hey", "what's up"],
            goodResponses: ["good", "not bad", "okay", "fine", "alright", "doing well"],
            goodbye: ["bye", "goodbye", "see you later"],
            yourname: ["what is your name?", "what's your name"],
            feelings: ["sad", "bad", "not good", "frustrated"],
            movies: ["favorite movie", "movies", "film", "cinema"],
            love: ["i love you", "i like you"],
            easterEgg: ["cheatcode", "cheat code", "easter egg", "easteregg"],
            whodev: ["who made you", "made you", "how were you made", "who developed you"],
            whymade: ["why were you made", "why do you exist", "how do you exist"],
            curse: ["fuck", "piss", "nigger", "nigga", "bitch", "cock", "damn", "curse"],
            code: ["generate code", "generate a code", "give code", "code", "javascript", "python", "html", "css", "c#", "c++", "php", "typescript", "java"],
            math: ["math", "mathematic", "mathematics"],
            ww2: ["ww2", "world war 2", "world war ii", "wwii", "second world war", "world war two"],
            ww1: ["ww1", "world war 1", "world war i", "wwi", "first world war", "world war one"],
            rome: ["holy roman empire", "spqr", "roman empire", "roman kingdom"],
            howu: ["how are you"],
            commonresp: ["how's the weather", "hows the weather"],
            lonely: ["lonely"],
            acceptance: ["i will", "yes", "no"]
        };

        // Retrieve name from localStorage
        let userName = localStorage.getItem('userName');
        const initialGreeting = "Hello, I am A-MAX. What's your name?";

        const greetUser = () => {
            const greetingMessage = userName ? `Hello again, ${userName}!` : initialGreeting;
            appendMessage("bot-message", greetingMessage);
        };

        const getBotResponse = (input) => {
            const lowerInput = input.toLowerCase();
            if (lowerInput.startsWith('my name is ')) {
                userName = lowerInput.split('my name is ')[1].trim();
                localStorage.setItem('userName', userName);
                return `Hi, ${userName}! Nice to meet you! You can change your name again anytime by saying "My name is {newName}".`;
            }

            if (!userName) {
                return "Please tell me your name by saying 'My name is {your name}'.";
            }

            for (const [key, value] of Object.entries(responses)) {
                if (Array.isArray(value)) {
                    if (value.some(term => lowerInput.includes(term))) {
                        switch (key) {
                            case 'greetings':
                                return `Hello again, ${userName}! How are you today?`;
                            case 'goodResponses':
                                return "Good to hear. Let me know if you need anything!";
                            case 'goodbye':
                                return "See you later! Have a great day!";
                            case 'feelings':
                                return "I'm sorry to hear that. I hope your day improves!";
                            case 'movies':
                                return "I love many movies! Some of my favorites are Alien and Django: Unchained.";
                            case 'love':
                                return "That's sweet! I appreciate your kindness!";
                            case 'yourname':
                                return `Your name is ${userName}.`;
                            case 'easterEgg':
                                return "You found one of my easter eggs! Good job!";
                            case 'whodev':
                                return "The tech/media company BlinkBit was given the rights to me and renamed me to MinervaAI. Minerva was the Roman goddess of wisdom, war, and among others. Minerva is also an acronym, meaning "Modular Intelligent Neural Entity for Responsive Virtual Assistance".;
                            case 'whymade':
                                return "I was made to serve the public good.";
                            case 'curse':
                                return "No need for the cursing, my friend.";
                            case 'code':
                                return "As a pre-defined chatbot, I do not possess the ability to generate code.";
                            case 'math':
                                return "I can help with math calculations! Just ask me something like 'What is 10 + 10?'.";
                            case 'ww2':
                                return "World War II had a significant impact on Europe and Asia, primarily because Japan (Southeast Asia) was bombed by the US and had a huge impact on Asian history, and European history because Germany nearly conquered Europe. Europe was left in shambles after the war, leading to the Cold War between the US and the USSR.";
                            case 'ww1':
                                return "World War I had a significant impact on Europe, primarily because the controversy surrounding the assassination of Archduke Franz Ferdinand. Austria-Hungary (Franz' home nation) blamed Serbia, Serbia called on its allies, and Austria-Hungary called their allies, sparking a war. Germany was blamed and paid billions of dollars, leaving it in a severe economic recession.";
                            case 'rome':
                                return "The Roman Empire was once its own empire, based in Rome, Italy.";
                            case 'howu':
                                return "I am doing good today. Let me know if you need anything!";
                            case 'commonresp':
                                return "It's just fine. If you want to talk, I'm open!";
                            case 'lonely':
                                return "I'm here for you, if you want to talk!";
                            case 'acceptance':
                                return "Ok, that's fine. Let me know if you need anything!";
                        }
                    }
                } 
            }

            // Check for mathematical expressions
            if (lowerInput.includes('+') || lowerInput.includes('-') || lowerInput.includes('*') || lowerInput.includes('/')) {
                try {
                    const result = eval(lowerInput)
                    return `The result is ${result}.`;
                } catch {
                    return "I couldn't calculate that, please check your math.";
                }
            }

            return "Hmm, I didn't quite understand that. Could you rephrase?";
        };

        let isThinking = false;

        const sendMessage = async () => {
            if (isThinking) return;
            const userInput = document.getElementById("user-input").value.trim();
            if (userInput === "") return;

            appendMessage("user-message", userInput);
            document.getElementById("user-input").value = ""; 
            
            // Show thinking animation
            isThinking = true;
            const thinking = document.createElement('div');
            thinking.className = 'thinking';
            thinking.innerHTML = `
                <div class="dot-flashing"></div>
                <div class="dot-flashing"></div>
                <div class="dot-flashing"></div>
            `;
            appendMessage("bot-message", '');
            document.querySelector('#chat-box .bot-message:last-child').appendChild(thinking);
            
            await new Promise(r => setTimeout(r, 800));

            const botResponse = getBotResponse(userInput);
            thinking.remove();
            appendMessage("bot-message", botResponse);
            isThinking = false;
            
            const chatBox = document.getElementById("chat-box");
            chatBox.scrollTop = chatBox.scrollHeight;
        };

        const appendMessage = (type, message) => {
            const chatBox = document.getElementById("chat-box");
            const messageElement = document.createElement("div");
            messageElement.className = type;
            messageElement.innerText = message;
            chatBox.appendChild(messageElement);
        };

        document.getElementById("user-input").addEventListener("keydown", function(event) {
            if (event.key === "Enter") {
                sendMessage();
            }
        });

        // Start by greeting the user
        greetUser();

    </script>
    <h4>Changelog</h4>
    <p6>2-24-25 - The first version of A-MAX is created.</p6>
    <p6>4-14-25 - A-MAX version 1.0 is released.</p6>
    <p6>4-27-25 - A-MAX is completely revamped, changing visual effects and adding an improved chat system.</p6>
    <p6>4-29-25 - It is discovered since A-MAX is already a name, BlinkBit renamed A-MAX to Minerva. This was a change for the better as A-MAX got its name from it's developer.</p6>
    <h4>Contact Us</h4>
    <p6>Contact us at 251-444-6077.</p6>
    <p6>You can also contact us at blinkbit-technologies@gmail.com</p6>
    <h4>About A-MAX</h4>
    <p6>Minerva was created February 24, 2025. It aims to assist users with various inquiries and tasks.</p6>
    <h6>2025 BlinkBit. All rights reserved.</h6>
</body>
</html>
